giltal1, ultra
Gil Tal (302469796), Pavel Gak (309110351)
EX: 5

FILES:

README -- this file

Makefile -- used to build files needed for this exercise.

MyCachingFileSystem.cpp -- A single threaded caching file using FUSE.
includes several methods dealing with the file system and changes it's behavior.
caching files using LRU algorithm.


REMARKS:
-none-

EXPLENATIONS:
We decided to implement the LRU algorithm by creating a deque of blocks we created.
We chose to use deque becuase it is easy to push and pop elements from the start and end of this data structure. 
the blocks are actually structs which contains information such as the file name, the number of the block
for that file (file can be divided into a number of blocks, each with it's own proportional number),
a time stamp which says when was the last time it was accessed, and a buffer of the data of the file of course.
We also implemented a comparator, comparing between blocks based on the time they were last accessed.
we sort our data structure using "make_heap()" function, which is in "algorithm" library.


the functions which use the caching data structure we built are "caching_read" and "chaching_rename":

- "caching_read" checks if the file or some blocks of it are already in the cache, and read from the cache
in case it's true. otherwise, it will read the file from the disk, and then put it in the cache.
if the cache is not full then the file will be pushed immediately, otherwise it will delete the least recently used blocks.

- "chaching_rename" changes the name of the file the user asked to change,
and then checks if the file is in the cache, and changes it name accordingly.

